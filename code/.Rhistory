# Clear variables
rm(list=ls())
# E_{true, k}
Etrue = read.csv(file.path("data", "result_summaries", "SIM_Etrue.csv"))
head(Etrue)
Etrue$err = Etrue$fn + Etrue$fp
Etrue[Etrue$err < 1e-16, 'err'] = 0
Etrue = Etrue[, c('sim', 'method', 'n.dims', 'err')]
head(Etrue)
Ett = read.csv(file.path("data", "result_summaries", "SIM_Ett.csv"))
head(Ett)
EttPi1 = read.csv(file.path("data", "result_summaries", "SIM_EttPi1.csv"))
# E_{tt, j, k} (Pi1)
Ettj.Pi1 = read.csv(file.path("data", "result_summaries", "SIM_Ettj_Pi1.csv"))
# E_{tt, j, k} (Pi2)
Ettj.Pi2 = read.csv(file.path("data", "result_summaries", "SIM_Ettj_Pi2.csv"))
# E_{cv, j, k} (Pi1)
Ecvj.Pi1 = read.csv(file.path("data", "result_summaries", "SIM_Ecvj_Pi1.csv"))
# E_{cv, j, k} (Pi2)
Ecvj.Pi2 = read.csv(file.path("data", "result_summaries", "SIM_Ecvj_Pi2.csv"))
# E_{cv, j, i, k} (Pi2)
Ecvj.CV3 = read.csv(file.path("data", "result_summaries", "SIM_Ecvj_CV3.csv"))
head(Ettj.Pi1)
head(Ett)
head(Etrue)
fnfp2err = function(x, tol = 1e-16){
x$err = x$fn + x$fp
x[x$err < tol, 'err'] = 0
x$fn = NULL
x$fp = NULL
return(x)
}
Etrue = read.csv(file.path("data", "result_summaries", "SIM_Etrue.csv"))
head(Etrue)
Etrue = fnfp2err(read.csv(file.path("data", "result_summaries", "SIM_Etrue.csv")))
head(Etrue)
# E_{true, k}
Etrue = fnfp2err(read.csv(file.path("data", "result_summaries", "SIM_Etrue.csv")))
# E_{tt, k}
Ett = fnfp2err(read.csv(file.path("data", "result_summaries", "SIM_Ett.csv")))
# E_{tt, j, k} (Pi1)
Ettj.Pi1 = fnfp2err(read.csv(file.path("data", "result_summaries", "SIM_Ettj_Pi1.csv")))
# E_{tt, j, k} (Pi2)
Ettj.Pi2 = fnfp2err(read.csv(file.path("data", "result_summaries", "SIM_Ettj_Pi2.csv")))
# Clear variables
rm(list=ls())
fnfp2err = function(x, tol = 1e-16){
x$err = x$fn + x$fp
x[x$err < tol, 'err'] = 0
x$fn = NULL
x$fp = NULL
return(x)
}
# E_{true, k}
Etrue = fnfp2err(read.csv(file.path("data", "result_summaries", "SIM_Etrue.csv")))
# E_{tt, k}
Ett = fnfp2err(read.csv(file.path("data", "result_summaries", "SIM_Ett.csv")))
# E_{tt, j, k} (Pi1)
Ettj.Pi1 = fnfp2err(read.csv(file.path("data", "result_summaries", "SIM_Ettj_Pi1.csv")))
# E_{tt, j, k} (Pi2)
Ettj.Pi2 = fnfp2err(read.csv(file.path("data", "result_summaries", "SIM_Ettj_Pi2.csv")))
Ecvj.Pi1 = fnfp2err(read.csv(file.path("data", "result_summaries", "SIM_Ecvj_Pi1.csv")))
head(Ecvj.Pi1)
table(Ecvj.Pi1$err)
Ecvj.Pi1 = fnfp2err(read.csv(file.path("data", "result_summaries", "SIM_Ecvj_Pi1.csv")))
Ecv.Pi1 = ddply(Ecvj.Pi1,
c('sim', 'method', 'n.dims'),
summarise,
err = sum(fn) + sum(fp))
# E_{cv, j, k} (Pi2)
Ecvj.Pi2 = fnfp2err(read.csv(file.path("data", "result_summaries", "SIM_Ecvj_Pi2.csv")))
Ecv.Pi2 = ddply(Ecvj.Pi2,
c('sim', 'method', 'n.dims'),
summarise,
err = sum(fn) + sum(fp))
# E_{cv, j, k} (Pi1)
Ecvj.Pi1 = fnfp2err(read.csv(file.path("data", "result_summaries", "SIM_Ecvj_Pi1.csv")))
Ecv.Pi1 = ddply(Ecvj.Pi1,
c('sim', 'method', 'n.dims'),
summarise,
err = sum(err))
# E_{cv, j, k} (Pi2)
Ecvj.Pi2 = fnfp2err(read.csv(file.path("data", "result_summaries", "SIM_Ecvj_Pi2.csv")))
Ecv.Pi2 = ddply(Ecvj.Pi2,
c('sim', 'method', 'n.dims'),
summarise,
err = sum(err))
Ecvj.CV3 = fnfp2err(read.csv(file.path("data", "result_summaries", "SIM_Ecvj_CV3.csv")))
head(Ecvj.CV3)
head(Ecv.Pi1)
kstar = ddply(Ecv.Pi1,
c('sim', 'method'),
summarise,
n.dims = min(n.dims[err == min(err)]))
head(kstar)
head(merge(Ecv.Pi1, kstar))
head(Etrue)
head(merge(Etrue, kstar))
kstar = ddply(Ecv.Pi1,
c('sim', 'method'),
summarise,
n.dims = min(n.dims[err == min(err)]))
tru.results = rbind(tru.results, transform(merge(Etrue, kstar), CV = 1, Pi = 1))
loo.results = rbind(loo.results, transform(merge(Ecv.Pi1, kstar),
n.dims.min = NA, n.dims.max = NA,
CV = 1, Pi = 1))
loo.results = data.frame()
tru.results = data.frame()
head(Ett)
kstar = ddply(Ett,
c('sim', 'method'),
summarise,
n.dims = min(n.dims[err == min(err)]))
head(kstar)
head(Ecvj.Pi1)
head(Ettj.Pi1)
kstar = ddply(Ettj.Pi1,
c('sim', 'method', 'left.out.obs'),
summarise,
n.dims = min(n.dims[err == min(err)]))
head(kstar)
loo.results = data.frame()
tru.results = data.frame()
# CV1, Pi1
kstar = ddply(Ecv.Pi1,
c('sim', 'method'),
summarise,
n.dims = min(n.dims[err == min(err)]))
tru.results = rbind(tru.results, transform(merge(Etrue, kstar), CV = 1, Pi = 1))
loo.results = rbind(loo.results, transform(merge(Ecv.Pi1, kstar),
n.dims.min = NA, n.dims.max = NA,
CV = 1, Pi = 1))
# CV1, Pi2
kstar = ddply(Ecv.Pi2,
c('sim', 'method'),
summarise,
n.dims = min(n.dims[err == min(err)]))
tru.results = rbind(tru.results, transform(merge(Etrue, kstar), CV = 1, Pi = 2))
loo.results = rbind(loo.results, transform(merge(Ecv.Pi2, kstar),
n.dims.min = NA, n.dims.max = NA,
CV = 1, Pi = 2))
# CV2, Pi1
# Prediction (population or true error)
kstar = ddply(Ett,
c('sim', 'method'),
summarise,
n.dims = min(n.dims[err == min(err)]))
tru.results = rbind(tru.results, transform(merge(Etrue, kstar), CV = 2, Pi = 1))
# Estimation (cross validation error)
kstar = ddply(Ettj.Pi1,
c('sim', 'method', 'left.out.obs'),
summarise,
n.dims = min(n.dims[err == min(err)]))
loo.results = rbind(loo.results,
ddply(merge(Ecvj.Pi1, kstar),
c('sim', 'method'),
summarise,
err = sum(fn + fp),
n.dims.min = min(n.dims),
n.dims.max = max(n.dims),
n.dims = NA,
CV = 2,
Pi = 1))
head(Ecvj.CV3)
head(Ecvj.Pi1)
# Clear variables
rm(list=ls())
fnfp2err = function(x, tol = 1e-16){
x$err = x$fn + x$fp
x[x$err < tol, 'err'] = 0
x$fn = NULL
x$fp = NULL
return(x)
}
# E_{true, k}
Etrue = fnfp2err(read.csv(file.path("data", "result_summaries", "SIM_Etrue.csv")))
# E_{tt, k}
Ett = fnfp2err(read.csv(file.path("data", "result_summaries", "SIM_Ett.csv")))
# E_{tt, j, k} (Pi1)
Ettj.Pi1 = fnfp2err(read.csv(file.path("data", "result_summaries", "SIM_Ettj_Pi1.csv")))
# E_{tt, j, k} (Pi2)
Ettj.Pi2 = fnfp2err(read.csv(file.path("data", "result_summaries", "SIM_Ettj_Pi2.csv")))
# E_{cv, j, k} (Pi1)
Ecvj.Pi1 = fnfp2err(read.csv(file.path("data", "result_summaries", "SIM_Ecvj_Pi1.csv")))
Ecv.Pi1 = ddply(Ecvj.Pi1,
c('sim', 'method', 'n.dims'),
summarise,
err = sum(err))
# E_{cv, j, k} (Pi2)
Ecvj.Pi2 = fnfp2err(read.csv(file.path("data", "result_summaries", "SIM_Ecvj_Pi2.csv")))
Ecv.Pi2 = ddply(Ecvj.Pi2,
c('sim', 'method', 'n.dims'),
summarise,
err = sum(err))
# E_{cv, j, i, k} (Pi2)
Ecvj.CV3 = fnfp2err(read.csv(file.path("data", "result_summaries", "SIM_Ecvj_CV3.csv")))
loo.results = data.frame()
tru.results = data.frame()
# CV1, Pi1
kstar = ddply(Ecv.Pi1,
c('sim', 'method'),
summarise,
n.dims = min(n.dims[err == min(err)]))
tru.results = rbind(tru.results, transform(merge(Etrue, kstar), CV = 1, Pi = 1))
# Note Prediction or true error is identical for CV3, Pi1.
tru.results = rbind(tru.results, transform(merge(Etrue, kstar), CV = 3, Pi = 1))
loo.results = rbind(loo.results, transform(merge(Ecv.Pi1, kstar),
n.dims.min = NA, n.dims.max = NA,
CV = 1, Pi = 1))
# CV1, Pi2
kstar = ddply(Ecv.Pi2,
c('sim', 'method'),
summarise,
n.dims = min(n.dims[err == min(err)]))
tru.results = rbind(tru.results, transform(merge(Etrue, kstar), CV = 1, Pi = 2))
loo.results = rbind(loo.results, transform(merge(Ecv.Pi2, kstar),
n.dims.min = NA, n.dims.max = NA,
CV = 1, Pi = 2))
# CV2, Pi1
# Prediction (population or true error):
kstar = ddply(Ett,
c('sim', 'method'),
summarise,
n.dims = min(n.dims[err == min(err)]))
tru.results = rbind(tru.results, transform(merge(Etrue, kstar), CV = 2, Pi = 1))
# Note Prediction or true error is identical for CV2, Pi2.
tru.results = rbind(tru.results, transform(merge(Etrue, kstar), CV = 2, Pi = 2))
# Estimation (cross validation error):
kstar = ddply(Ettj.Pi1,
c('sim', 'method', 'left.out.obs'),
summarise,
n.dims = min(n.dims[err == min(err)]))
loo.results = rbind(loo.results,
ddply(merge(Ecvj.Pi1, kstar),
c('sim', 'method'),
summarise,
err = sum(err),
n.dims.min = min(n.dims),
n.dims.max = max(n.dims),
n.dims = NA,
CV = 2,
Pi = 1))
# CV2, Pi2
# Note Prediction or true error is identical for CV2, Pi1.
# Estimation (cross validation error):
kstar = ddply(Ettj.Pi2,
c('sim', 'method', 'left.out.obs'),
summarise,
n.dims = min(n.dims[err == min(err)]))
loo.results = rbind(loo.results,
ddply(merge(Ecvj.Pi2, kstar),
c('sim', 'method'),
summarise,
err = sum(err),
n.dims.min = min(n.dims),
n.dims.max = max(n.dims),
n.dims = NA,
CV = 2,
Pi = 2))
# CV3 (double CV)
# Note Prediction or true error is identical for CV1, Pi1.
# Estimation (cross validation error):
kstar = ddply(Ecvj.CV3,
c('sim', 'method', 'left.out.obs'),
summarise,
n.dims = min(n.dims[err == min(err)]))
loo.results = rbind(loo.results,
ddply(merge(Ecvj.Pi1, kstar),
c('sim', 'method'),
summarise,
err = sum(err),
n.dims.min = min(n.dims),
n.dims.max = max(n.dims),
n.dims = NA,
CV = 3,
Pi = 1))
write.csv(loo.results,
file.path("data", "result_summaries", "SIM_loo_results.csv"),
row.names = FALSE)
write.csv(tru.results,
file.path("data", "result_summaries", "SIM_tru_results.csv"),
row.names = FALSE)
# Clear variables
rm(list=ls())
fnfp2err = function(x, tol = 1e-15){
x$err = x$fn + x$fp
x[x$err < tol, 'err'] = 0
x$fn = NULL
x$fp = NULL
return(x)
}
# E_{true, k}
Etrue = fnfp2err(read.csv(file.path("data", "result_summaries", "SIM_Etrue.csv")))
# E_{tt, k}
Ett = fnfp2err(read.csv(file.path("data", "result_summaries", "SIM_Ett.csv")))
# E_{tt, j, k} (Pi1)
Ettj.Pi1 = fnfp2err(read.csv(file.path("data", "result_summaries", "SIM_Ettj_Pi1.csv")))
# E_{tt, j, k} (Pi2)
Ettj.Pi2 = fnfp2err(read.csv(file.path("data", "result_summaries", "SIM_Ettj_Pi2.csv")))
# E_{cv, j, k} (Pi1)
Ecvj.Pi1 = fnfp2err(read.csv(file.path("data", "result_summaries", "SIM_Ecvj_Pi1.csv")))
Ecv.Pi1 = ddply(Ecvj.Pi1,
c('sim', 'method', 'n.dims'),
summarise,
err = sum(err))
# E_{cv, j, k} (Pi2)
Ecvj.Pi2 = fnfp2err(read.csv(file.path("data", "result_summaries", "SIM_Ecvj_Pi2.csv")))
Ecv.Pi2 = ddply(Ecvj.Pi2,
c('sim', 'method', 'n.dims'),
summarise,
err = sum(err))
# E_{cv, j, i, k} (Pi2)
Ecvj.CV3 = fnfp2err(read.csv(file.path("data", "result_summaries", "SIM_Ecvj_CV3.csv")))
loo.results = data.frame()
tru.results = data.frame()
# CV1, Pi1
kstar = ddply(Ecv.Pi1,
c('sim', 'method'),
summarise,
n.dims = min(n.dims[err == min(err)]))
tru.results = rbind(tru.results, transform(merge(Etrue, kstar), CV = 1, Pi = 1))
# Note Prediction or true error is identical for CV3, Pi1.
tru.results = rbind(tru.results, transform(merge(Etrue, kstar), CV = 3, Pi = 1))
loo.results = rbind(loo.results, transform(merge(Ecv.Pi1, kstar),
n.dims.min = NA, n.dims.max = NA,
CV = 1, Pi = 1))
# CV1, Pi2
kstar = ddply(Ecv.Pi2,
c('sim', 'method'),
summarise,
n.dims = min(n.dims[err == min(err)]))
tru.results = rbind(tru.results, transform(merge(Etrue, kstar), CV = 1, Pi = 2))
loo.results = rbind(loo.results, transform(merge(Ecv.Pi2, kstar),
n.dims.min = NA, n.dims.max = NA,
CV = 1, Pi = 2))
# CV2, Pi1
# Prediction (population or true error):
kstar = ddply(Ett,
c('sim', 'method'),
summarise,
n.dims = min(n.dims[err == min(err)]))
tru.results = rbind(tru.results, transform(merge(Etrue, kstar), CV = 2, Pi = 1))
# Note Prediction or true error is identical for CV2, Pi2.
tru.results = rbind(tru.results, transform(merge(Etrue, kstar), CV = 2, Pi = 2))
# Estimation (cross validation error):
kstar = ddply(Ettj.Pi1,
c('sim', 'method', 'left.out.obs'),
summarise,
n.dims = min(n.dims[err == min(err)]))
loo.results = rbind(loo.results,
ddply(merge(Ecvj.Pi1, kstar),
c('sim', 'method'),
summarise,
err = sum(err),
n.dims.min = min(n.dims),
n.dims.max = max(n.dims),
n.dims = NA,
CV = 2,
Pi = 1))
# CV2, Pi2
# Note Prediction or true error is identical for CV2, Pi1.
# Estimation (cross validation error):
kstar = ddply(Ettj.Pi2,
c('sim', 'method', 'left.out.obs'),
summarise,
n.dims = min(n.dims[err == min(err)]))
loo.results = rbind(loo.results,
ddply(merge(Ecvj.Pi2, kstar),
c('sim', 'method'),
summarise,
err = sum(err),
n.dims.min = min(n.dims),
n.dims.max = max(n.dims),
n.dims = NA,
CV = 2,
Pi = 2))
# CV3 (double CV)
# Note Prediction or true error is identical for CV1, Pi1.
# Estimation (cross validation error):
kstar = ddply(Ecvj.CV3,
c('sim', 'method', 'left.out.obs'),
summarise,
n.dims = min(n.dims[err == min(err)]))
loo.results = rbind(loo.results,
ddply(merge(Ecvj.Pi1, kstar),
c('sim', 'method'),
summarise,
err = sum(err),
n.dims.min = min(n.dims),
n.dims.max = max(n.dims),
n.dims = NA,
CV = 3,
Pi = 1))
write.csv(loo.results,
file.path("data", "result_summaries", "SIM_loo_results.csv"),
row.names = FALSE)
write.csv(tru.results,
file.path("data", "result_summaries", "SIM_tru_results.csv"),
row.names = FALSE)
rm(list=ls())
library(plyr)
library(ggplot2)
library(latex2exp)
# Load and organise data
loo.results = read.csv(file.path("data", "result_summaries", "SIM_loo_results.csv"))
loo.results$err = loo.results$err / 43
names(loo.results)[names(loo.results) == 'err'] = 'Eloo'
head(loo.results)
sum(loo.results > 0 & loo.results < 1e-15)
sum(loo.results$Eloo > 0 & loo.results$Eloo < 1e-15)
tru.results = read.csv(file.path("data", "result_summaries", "SIM_tru_results.csv"))
names(tru.results)[names(tru.results) == 'err'] = 'Etrue'
head(tru.results)
names(tru.results)[names(tru.results) == 'n.dims'] = 'n.dims.tru'
head(tru.results)
df = merge(loo.results, tru.results)
sum(df$Eloo > 0 & df$Eloo < 1e-15)
sum(df$Etrue > 0 & df$Etrue < 1e-15)
sum(df$Etrue != 0 & df$Etrue < 1e-15)
df[df$Etrue < 1e-15, 'Etrue'] = 1e-15
rm(list=ls())
library(plyr)
library(ggplot2)
library(latex2exp)
# Load and organise data
loo.results = read.csv(file.path("data", "result_summaries", "SIM_loo_results.csv"))
loo.results$err = loo.results$err / 43
names(loo.results)[names(loo.results) == 'err'] = 'Eloo'
tru.results = read.csv(file.path("data", "result_summaries", "SIM_tru_results.csv"))
names(tru.results)[names(tru.results) == 'err'] = 'Etrue'
names(tru.results)[names(tru.results) == 'n.dims'] = 'n.dims.tru'
df = merge(loo.results, tru.results)
df[df$Etrue < 1e-15, 'Etrue'] = 1e-15
# df.CV3 = subset(df, CV == 3)
# # df = subset(df, CV != 3)
#
# df.CV2 = subset(df, CV == 2)
#
# tmp1 = df.CV2
# tmp1$n.dims = tmp1$n.dims.min
# tmp1$range = 'min'
# tmp1 = tmp1[, c('sim', 'method', 'Pi', 'Alt', 'n.dims', 'range')]
# tmp2 = df.CV2
# tmp2$n.dims = tmp2$n.dims.max
# tmp2$range = 'max'
# tmp2 = tmp2[, c('sim', 'method', 'Pi', 'Alt', 'n.dims', 'range')]
#
# df.CV2 = rbind(tmp1, tmp2)
# # Opti
# df.opti = subset(df, Alt %in% 1:3)[, c('sim', 'method', 'Alt', 'n.dims.tru', 'Etrue')]
# names(df.opti)[names(df.opti) == 'n.dims.tru'] = 'n.dims'
# df.opti$Alt = as.character(df.opti$Alt)
# df.opti[df.opti$Alt == "1", 'Alt'] = 'CV2'
# df.opti[df.opti$Alt == "2", 'Alt'] = 'CV1Pi1'
# df.opti[df.opti$Alt == "3", 'Alt'] = 'CV1Pi2'
#
# # E_{true, k}
# Etrue = read.csv(file.path("data", "result_summaries", "SIM_Etrue.csv"))
# Etrue$err = Etrue$fn + Etrue$fp
# Etrue[Etrue$err < 1e-15, 'err'] = 1e-15
# Etrue = Etrue[, c('sim', 'method', 'n.dims', 'err')]
#
# kstar = ddply(Etrue,
#               c('sim', 'method'),
#               summarise,
#               n.dims = min(n.dims[err == min(err)]))
# tmp = transform(merge(Etrue, kstar), Alt = 'Opti')
# names(tmp)[names(tmp) == 'err'] = 'Etrue'
# df.opti = rbind(df.opti, tmp)
# Plotting aesthetic modifications
x_max_hist = max(c(max(df$Eloo*43), max(df$Etrue*43)))
df$CV = paste0('CV', df$CV)
df$Pi = paste0('Pi', df$Pi)
# df.CV2$Pi = paste0('Pi', df.CV2$Pi)
tmp = df[, c('sim', 'method', 'CV', 'Pi', 'Eloo')]
names(tmp)[names(tmp) == 'Eloo'] = 'E'
tmp$Type = 'CV'
df.plot = tmp
tmp = df[, c('sim', 'method', 'CV', 'Pi', 'Etrue')]
names(tmp)[names(tmp) == 'Etrue'] = 'E'
tmp$Type = 'Predict'
df.plot = rbind(df.plot, tmp)
tmp = df[, c('sim', 'method', 'CV', 'Pi', 'Eloo', 'Etrue')]
tmp$E = tmp$Eloo - tmp$Etrue
tmp$Type = 'CV - Predict'
df.plot = rbind(df.plot, tmp[, c('sim', 'method', 'CV', 'Pi', 'E', 'Type')])
df.plot$Alt = factor(paste(df.plot$CV, df.plot$Pi, sep = '.'), levels = c("CV1.Pi2", "CV1.Pi1", "CV2.Pi2", "CV2.Pi1", "CV3.Pi1"))
p = ggplot(df.plot, aes(x = E, fill = method)) +
geom_histogram(binwidth = 1/43,
position = 'identity', alpha = 0.4) +
facet_grid(Alt ~ Type, scales = 'free') +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
geom_vline(data = subset(df.plot, Type == "CV - Predict"), aes(xintercept = 0))
p
p = p + theme(legend.position = "none",
axis.title = element_blank(),
strip.text.y = element_blank(),
strip.text.x = element_blank())
p
p = ggplot(df.plot, aes(x = E, fill = method)) +
geom_histogram(binwidth = 1/43,
position = 'identity', alpha = 0.4) +
facet_grid(Alt ~ Type, scales = 'free') +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
geom_vline(data = subset(df.plot, Type == "CV - Predict"), aes(xintercept = 0))
p
ggsave(file.path('..', 'figures', 'Fig2_EcvEpred.png'), p, width = 11.4, height = 11.4, units = "cm")
p = p + theme(legend.position = "none",
axis.title = element_blank(),
strip.text.y = element_blank(),
strip.text.x = element_blank())
ggsave(file.path('..', 'figures', 'Fig2_EcvEpred_notext.png'), p, width = 8.7, height = 8.7, units = "cm")
